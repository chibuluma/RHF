@page "/beneficiaryInfo"

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject ISnackbar SnackbarService
@inject NavigationManager UriHelper
@attribute [Authorize]

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>
<MudTable T="RHF.Shared.DonationsHeaderDTO" ServerData="@(new Func<TableState, Task<TableData<RHF.Shared.DonationsHeaderDTO>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" 
          RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">RHF Beneficiaries</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id" T="RHF.Shared.DonationsHeaderDTO">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="recipient" T="RHF.Shared.DonationsHeaderDTO">Recipient</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="period" T="RHF.Shared.DonationsHeaderDTO">Period</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="total_spent" T="RHF.Shared.DonationsHeaderDTO">Total Spent</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Recipient">@context.Recipient</MudTd>
        <MudTd DataLabel="Period">@context.Period</MudTd>
        <MudTd DataLabel="TotalAmountSpent">K @context.TotalAmountSpent</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    RHF.Shared.DonationsHeaderDTO model = new  RHF.Shared.DonationsHeaderDTO();
    private IEnumerable< RHF.Shared.DonationsHeaderDTO> pagedData;
    private MudTable< RHF.Shared.DonationsHeaderDTO> table;

    private int totalItems;
    private string searchString = null;
    private int selectedRowNumber = -1;
    private List<string> clickedEvents = new();

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<RHF.Shared.DonationsHeaderDTO>> ServerReload(TableState state)
    {
        IEnumerable<RHF.Shared.DonationsHeaderDTO> data = await httpClient.GetFromJsonAsync<List<RHF.Shared.DonationsHeaderDTO>>("api/DonationsHeader/GetDonationHeader");
        
        await Task.Delay(300);

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Recipient.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Period.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "reciepient":
                data = data.OrderByDirection(state.SortDirection, o => o.Recipient);
                break;
            case "period":
                data = data.OrderByDirection(state.SortDirection, o => o.Period);
                break;
            case "total_spent":
                data = data.OrderByDirection(state.SortDirection, o => o.TotalAmountSpent);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new TableData<RHF.Shared.DonationsHeaderDTO>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private string SelectedRowClassFunc(RHF.Shared.DonationsHeaderDTO element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (table.SelectedItem != null && table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    private void RowClickEvent(TableRowClickEventArgs<RHF.Shared.DonationsHeaderDTO> selected_benefactor)
    {
            SnackbarService.Add
            (
                @<div>
                    <p>Selected: @selected_benefactor.Item.Recipient</p>
                </div>, severity: Severity.Info
            );
        
        Task.Delay(500);

        //UriHelper.NavigateTo($"donationsHeaderDetails/{selected_benefactor.Item.Id}");
        
    }
}