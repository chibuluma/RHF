@inject HttpClient Http
@inject ISnackbar SnackbarService

    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Class="mr-3 mb-n1"/>
                Update password for @User?
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                        <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                    @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>

            </EditForm>
        </DialogContent>
        <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
                <MudButton OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
@code {
    bool success;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    [Parameter] public Color Color { get; set; }
    [Parameter] public string User { get; set; }
    [Parameter] public string Token { get; set; }
    void Cancel() => MudDialog.Cancel();

    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
    public string Password { get; set; }

    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.Compare(nameof(Password))]
    public string Password2 { get; set; }
    private async void OnValidSubmit(EditContext context)
    {
        var user_role_map = new UserPassword(){ UserName = User, Token= Token, Password =  Password};
        var req = new HttpRequestMessage();
        req.Content= JsonContent.Create(user_role_map);
        req.Method = HttpMethod.Delete;
        req.RequestUri = new Uri($"api/UserManager/UpdatePassword", UriKind.Relative);
        
        var response = await Http.SendAsync(req);

        if(response.IsSuccessStatusCode){
            Message("Password updated successfully", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            success = true;
            StateHasChanged();
        }else{
            Message(await response.Content.ReadAsStringAsync(), Severity.Success);
        }
        success = true;
    }

    PasswordForm model = new PasswordForm();
    public class PasswordForm
    {
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

        public void Message(String message, Severity severity){
            SnackbarService.Add(
                @<div>
                    <p>@message</p>
                </div>, severity: severity,
                config => { config.ShowCloseIcon = true; config.CloseAfterNavigation = true; }
            );
    }
}
