@page "/assign-roles"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles ="Admin")]
@inject ISnackbar SnackbarService
@inject IDialogService DialogService

@using RHF.Shared;
<MudGrid>
    <MudItem xs="12">
        <MudText Align="Align.Center" Typo="Typo.h4">RHF Assign User Roles Module</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudSelect T="string" Label="RHF Users" AdornmentIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Surface" 
            AnchorOrigin="Origin.BottomCenter" @bind-Value="selected_user">
            @foreach (var user in Users)
            {
                <MudSelectItem T="string" Value="@user.Email">@user.Email</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
   <MudItem xs="6">
        <MudSelect T="string" Label="RHF Roles" HelperText="Pick roles" MultiSelection="true" @bind-Value="value" 
            @bind-SelectedValues="options">
            @foreach (var role in  Roles)
            {
                <MudSelectItem T="string" Value="@role.Name">@role.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTFootRow>
            <MudButton Variant="Variant.Outlined"  StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="AsignRole">Assign</MudButton>       
        </MudTFootRow>
    </MudItem>
    
    <MudItem xs="12">
        <table class="table">
            <th>Email</th>
            <th>Assigned role(s)</th>
            @foreach(var user in _UserRoles){
                <tbody>
                    <tr>
                        <td><li>@user.Key</li></td>
                        @foreach(var role in user.Value){
                             <tr>
                                <td>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="((args) => RemoveRoleAssignment(user.Key,role))" aria-label="delete" id="@user"></MudIconButton>
                                    <label for="@role">@role</label> 
                                </td>
                            </tr> 
                        }          
                    </tr>
                </tbody>
            }
        </table>
    </MudItem>
</MudGrid>

@code {
    private List<UserInfo> Users = new();
    private List<Roles> Roles = new();
    private System.Security.Claims.ClaimsPrincipal User;
    private string value { get; set; } = "Nothing selected";
    private string selected_user { get; set; }
    private IEnumerable<string> options { get; set; } = new List<string>();
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;   

        Users = await Http?.GetFromJsonAsync<List<UserInfo>>($"/api/UserManager/GetUsers");
        Roles = await Http?.GetFromJsonAsync<List<Roles>>($"api/UserManager/GetRoles");  
        await InitialiseUserRoleMappings();
    }
    public async Task RemoveRoleAssignment(string user, string selected_role){

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to remove the {selected_role} role from {user}? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var user_role_map = new UserRoleRequest(){ UserName = user, RoleName= selected_role };
            
            var req = new HttpRequestMessage();
            req.Content= JsonContent.Create(user_role_map);
            req.Method = HttpMethod.Delete;
            req.RequestUri = new Uri($"api/UserManager/RemoveUserRole", UriKind.Relative);

            var response = await Http.SendAsync(req);

            if(response.IsSuccessStatusCode){
                await InitialiseUserRoleMappings(); // make a fresh api call
                StateHasChanged();
            }else{
                var msg = await response.Content.ReadAsStringAsync();
                Message(msg, severity:Severity.Error);
            }
        }
    }
    public async Task InitialiseUserRoleMappings(){
        UserRolesResponse userRolesResponse = await Http?.GetFromJsonAsync<UserRolesResponse>("api/UserManager/GetUsersAndRoles");

        if (userRolesResponse != null )
        {
            _UserRoles = userRolesResponse.UserRoles;
        }
    }
    public async void AsignRole(){
        if(string.IsNullOrEmpty(selected_user) || options ==null){
            SnackbarService.Add(
                @<div>
                    <p>User and roles cannot be null</p>
                </div>
                , severity: Severity.Error,
                config => { config.ShowCloseIcon = true; config.CloseAfterNavigation = true; }
            );
            return;
        }
        foreach(var role in options){
            var request = new UserRoleRequest(){UserName = selected_user, RoleName = role};
            var response = await Http.PostAsJsonAsync<UserRoleRequest>("api/UserManager/MapUserRole", request);

            if(response.IsSuccessStatusCode){
                Message($"User role {role} successfully mapped to {value}", severity:Severity.Success);
                await InitialiseUserRoleMappings(); // make a fresh api call
                StateHasChanged();
            }
            else
                Message(await response.Content.ReadAsStringAsync(), severity:Severity.Error);

            return;
        }

    }
    public Dictionary<string, IList<string>> _UserRoles { get; set; } = new();

    public void Message(String message, Severity severity){
            SnackbarService.Add(
                @<div>
                    <p>@message</p>
                </div>, severity: severity,
                config => { config.ShowCloseIcon = true; config.CloseAfterNavigation = true; }
            );
    }
    public class UserRoles
	{
        public bool ShowDetails { get; set; } = true;
		public UserInfo Users { get; set; }
		public IList<Roles> Roles { get; set; }
	}
}